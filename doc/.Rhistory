weight_train[label_train == v] = 0.5 * length(label_train) / length(label_train[label_train == v])
}
if (sample.reweight){
} else {
tm_train_RF <- system.time(fit_train_RF <- train_RF(feature_train, label_train, ntree = 50, mtry =5))
}
save(fit_train_RF, tm_train_RF, file="../output/fit_train_RF.RData")
} else {
load(file="../output/fit_train_RF.RData")
}
# random forest
hyper_grid_rf_uw <- expand.grid(
ntrees = c(100, 300, 500, 800, 1000),
mtry = c(500)
)
hyper_grid_rf_uw$ntrees[1]
ntrees[1]
hyper_grid_rf_uw$ntrees
hyper_grid_rf_uw
fit_train_RF
tm_test = NA
feature_test <- as.matrix(dat_test[, -6007])
if(run.test.RF){
load(file="../output/fit_train_RF.RData")
tm_test_RF <- system.time(label_pred <- as.integer(test_RF(fit_train_RF, feature_test)));
}
tm_test_RF
label_pred
dat_test$label
label_pred <- ifelse(label_pred == 1, 0, 1)
label_pred
dat_test$label
sum(preds==dat_test$label)/length(dat_test$label)
install.packages("pROC")
library(pROC)
roc(label_pred, dat_test$label)$auc
tm_test = NA
feature_test <- as.matrix(dat_test[, -6007])
if(run.test.RF){
load(file="../output/fit_train_RF.RData")
tm_test_RF <- system.time(label_pred <- as.integer(test_RF(fit_train_RF, feature_test)));
}
label_pred <- as.integer(ifelse(label_pred == 1, 0, 1))
label_pred
#raw accuracy
rftestacc = sum(preds==dat_test$label)/length(dat_test$label)
rftestacc
roc(label_pred, dat_test$label)$auc
as.integer(dat_test$label)
roc(label_pred, as.integer(dat_test$label))$auc
rf_auf <- roc(label_pred, as.integer(dat_test$label))$auc
rf_auc <- roc(label_pred, as.integer(dat_test$label))$auc
load("../output/res_cv_RF.RData")
res_cv <- as.data.frame(res_cv)
colnames(res_cv) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
#res_cv$k <- c(ntree,mtry)
for(i in 1:length(ntree)){
cat("ntree = ", ntree[i], "\n")
for(j in 1:length(mtry)){
cat("mtry = ", mtry[j], "\n")
res_cv[(i-1)*length(mtry)+j,'ntree'] <- ntree[i]
res_cv[(i-1)*length(mtry)+j,'mtry'] <- mtry[j]
}}
ggplot(aes(x = ntree, y = 1-mean_error,
ymin = mean_error - sd_erro
if(run.cv){
p1 <- res_cv %>% r, ymax = mean_error + sd_error)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- res_cv %>%
ggplot(aes(x = ntree, y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
print(p2)
}
load("../output/res_cv_RF.RData")
res_cv <- as.data.frame(res_cv)
colnames(res_cv) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
#res_cv$k <- c(ntree,mtry)
for(i in 1:length(ntree)){
cat("ntree = ", ntree[i], "\n")
for(j in 1:length(mtry)){
cat("mtry = ", mtry[j], "\n")
res_cv[(i-1)*length(mtry)+j,'ntree'] <- ntree[i]
res_cv[(i-1)*length(mtry)+j,'mtry'] <- mtry[j]
}}
if(run.cv){
p1 <- res_cv %>%
ggplot(aes(x = ntree, y = 1-mean_error,
ymin = mean_error - sd_error, ymax = mean_error + sd_error)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- res_cv %>%
ggplot(aes(x = ntree, y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
print(p2)
}
#if(!require("EBImage")){
#  install.packages("BiocManager")
#  BiocManager::install("EBImage")
#}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("xgboost")){
install.packages("xgboost")
}
if(!require("randomForest")){
install.packages("randomForest")
}
if(!require("ranger")){
install.packages("ranger")
}
if(!require("e1071")){
install.packages("e1071")
}
library(R.matlab)
library(readxl)
library(dplyr)
#library(EBImage)
library(ggplot2)
library(caret)
library(glmnet)
library(WeightedROC)
library(gbm)
library(xgboost)
library(randomForest)
library(ranger)
library(magrittr)
library(e1071)
# install other packages as needed using the format above
load("../output/res_cv_RF.RData")
res_cv <- as.data.frame(res_cv)
colnames(res_cv) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
#res_cv$k <- c(ntree,mtry)
for(i in 1:length(ntree)){
cat("ntree = ", ntree[i], "\n")
for(j in 1:length(mtry)){
cat("mtry = ", mtry[j], "\n")
res_cv[(i-1)*length(mtry)+j,'ntree'] <- ntree[i]
res_cv[(i-1)*length(mtry)+j,'mtry'] <- mtry[j]
}}
if(run.cv){
p1 <- res_cv %>%
ggplot(aes(x = ntree, y = 1-mean_error,
ymin = mean_error - sd_error, ymax = mean_error + sd_error)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- res_cv %>%
ggplot(aes(x = ntree, y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
print(p2)
}
p1
load("../output/res_cv_RF.RData")
res_cv <- as.data.frame(res_cv)
colnames(res_cv) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
#res_cv$k <- c(ntree,mtry)
for(i in 1:length(ntree)){
cat("ntree = ", ntree[i], "\n")
for(j in 1:length(mtry)){
cat("mtry = ", mtry[j], "\n")
res_cv[(i-1)*length(mtry)+j,'ntree'] <- ntree[i]
res_cv[(i-1)*length(mtry)+j,'mtry'] <- mtry[j]
}}
if(run.cv){
p1 <- res_cv %>%
ggplot(aes(x = ntree, y = mean_error,
ymin = mean_error - sd_error, ymax = mean_error + sd_error)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- res_cv %>%
ggplot(aes(x = ntree, y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
print(p2)
}
p1
load("../output/res_cv_RF.RData")
res_cv <- as.data.frame(res_cv)
colnames(res_cv) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
#res_cv$k <- c(ntree,mtry)
for(i in 1:length(ntree)){
cat("ntree = ", ntree[i], "\n")
for(j in 1:length(mtry)){
cat("mtry = ", mtry[j], "\n")
res_cv[(i-1)*length(mtry)+j,'ntree'] <- ntree[i]
res_cv[(i-1)*length(mtry)+j,'mtry'] <- mtry[j]
}}
if(run.cv){
p1 <- res_cv %>%
ggplot(aes(x = ntree, y = 1-mean_error,
ymin = mean_error - sd_error, ymax = mean_error + sd_error)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- res_cv %>%
ggplot(aes(x = ntree, y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
print(p2)
}
p1
load("../output/res_cv_RF.RData")
res_cv <- as.data.frame(res_cv)
colnames(res_cv) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
#res_cv$k <- c(ntree,mtry)
for(i in 1:length(ntree)){
cat("ntree = ", ntree[i], "\n")
for(j in 1:length(mtry)){
cat("mtry = ", mtry[j], "\n")
res_cv[(i-1)*length(mtry)+j,'ntree'] <- ntree[i]
res_cv[(i-1)*length(mtry)+j,'mtry'] <- mtry[j]
}}
if(run.cv){
p1 <- res_cv %>%
ggplot(aes(x = ntree, y = 1-mean_error,
ymin = mean_error - sd_error, ymax = mean_error + sd_error)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("mean_error")
p2 <- res_cv %>%
ggplot(aes(x = ntree, y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
print(p2)
}
p1
p2
p1
load("../output/res_cv_RF.RData")
res_cv <- as.data.frame(res_cv)
colnames(res_cv) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
#res_cv$k <- c(ntree,mtry)
for(i in 1:length(ntree)){
cat("ntree = ", ntree[i], "\n")
for(j in 1:length(mtry)){
cat("mtry = ", mtry[j], "\n")
res_cv[(i-1)*length(mtry)+j,'ntree'] <- ntree[i]
res_cv[(i-1)*length(mtry)+j,'mtry'] <- mtry[j]
}}
if(run.cv){
p1 <- res_cv %>% mutate(mean_error_true = 1- mean_error)%>%
ggplot(aes(x = ntree, y = mean_error_true,
)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("mean_error")
p2 <- res_cv %>%
ggplot(aes(x = ntree, y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
print(p2)
}
load("../output/res_cv_RF.RData")
res_cv <- as.data.frame(res_cv)
colnames(res_cv) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
#res_cv$k <- c(ntree,mtry)
for(i in 1:length(ntree)){
cat("ntree = ", ntree[i], "\n")
for(j in 1:length(mtry)){
cat("mtry = ", mtry[j], "\n")
res_cv[(i-1)*length(mtry)+j,'ntree'] <- ntree[i]
res_cv[(i-1)*length(mtry)+j,'mtry'] <- mtry[j]
}}
if(run.cv){
p1 <- res_cv %>% mutate(mean_error_true = 1- mean_error)%>%
ggplot(aes(x = ntree, y = mean_error_true,
ymin = mean_error - sd_error, ymax = mean_error + sd_error )) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("mean_error")
p2 <- res_cv %>%
ggplot(aes(x = ntree, y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
print(p2)
}
p1
load("../output/res_cv_RF.RData")
res_cv <- as.data.frame(res_cv)
colnames(res_cv) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
#res_cv$k <- c(ntree,mtry)
for(i in 1:length(ntree)){
cat("ntree = ", ntree[i], "\n")
for(j in 1:length(mtry)){
cat("mtry = ", mtry[j], "\n")
res_cv[(i-1)*length(mtry)+j,'ntree'] <- ntree[i]
res_cv[(i-1)*length(mtry)+j,'mtry'] <- mtry[j]
}}
if(run.cv){
p1 <- res_cv %>% mutate(mean_error_true = 1- mean_error , sd_error_true = sd(mean_error_true))%>%
ggplot(aes(x = ntree, y = mean_error_true,
ymin = mean_error_true - sd_error, ymax = mean_error_true + sd_error )) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("mean_error")
p2 <- res_cv %>%
ggplot(aes(x = ntree, y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
print(p2)
}
p1
getwd()
# training weights
if (run.train.RF) {
weight_train <- rep(NA, length(label_train))
for (v in unique(label_train)){
weight_train[label_train == v] = 0.5 * length(label_train) / length(label_train[label_train == v])
}
if (sample.reweight){
} else {
tm_train_RF <- system.time(fit_train_RF <- train_RF(feature_train, label_train, ntree = 500, mtry =500))
}
save(fit_train_RF, tm_train_RF, file="../output/fit_train_RF.RData")
} else {
load(file="../output/fit_train_RF.RData")
}
run.train.RF
run.train.RF=FALSE
tm_test = NA
feature_test <- as.matrix(dat_test[, -6007])
if(run.test.RF){
load(file="../output/fit_train_RF.RData")
tm_test_RF <- system.time(label_pred <- as.integer(test_RF(fit_train_RF, feature_test)));
}
label_pred <- ifelse(label_pred == 1, 0, 1)
#raw accuracy
rftestacc = sum(label_pred==dat_test$label)/length(dat_test$label)
# predprob = predict(fit_train_RF,dat_test[,-6007],type="prob")
rf_auc <- roc(label_pred, as.integer(dat_test$label))$auc
tm_test = NA
feature_test <- as.matrix(dat_test[, -6007])
if(run.test.RF){
load(file="../output/fit_train_RF.RData")
tm_test_RF <- system.time(label_pred <- as.integer(test_RF(fit_train_RF, feature_test)));
}
label_pred <- ifelse(label_pred == 1, 0, 1)
#raw accuracy
rftestacc = sum(label_pred==dat_test$label)/length(dat_test$label)
# predprob = predict(fit_train_RF,dat_test[,-6007],type="prob")
rf_auc <- roc(label_pred, as.integer(dat_test$label))$auc
tm_test = NA
feature_test <- as.matrix(dat_test[, -6007])
if(run.test.RF){
load(file="../output/fit_train_RF.RData")
tm_test_RF <- system.time(label_pred <- as.integer(test_RF(fit_train_RF, feature_test)));
}
tm_test_RF
#label_pred <- ifelse(label_pred == 1, 0, 1)
#raw accuracy
rftestacc = sum(label_pred==dat_test$label)/length(dat_test$label)
# predprob = predict(fit_train_RF,dat_test[,-6007],type="prob")
rf_auc <- roc(label_pred, as.integer(dat_test$label))$auc
tm_test = NA
feature_test <- as.matrix(dat_test[, -6007])
if(run.test.RF){
load(file="../output/fit_train_RF.RData")
tm_test_RF <- system.time(label_pred <- as.integer(test_RF(fit_train_RF, feature_test)));
}
label_pred <- ifelse(label_pred == 1, 0, 1)
#raw accuracy
rftestacc = sum(label_pred==dat_test$label)/length(dat_test$label)
# predprob = predict(fit_train_RF,dat_test[,-6007],type="prob")
#rf_auc <- roc(label_pred, as.integer(dat_test$label))$auc
cat("The unweighted accuracy of the random forest model is ", rftestacc*100, "%.\n")
cat("The unweighted AUC of the random forest model is ", rf_auc, ".\n")
library(Proc)
library(pROC)
tm_test = NA
feature_test <- as.matrix(dat_test[, -6007])
if(run.test.RF){
load(file="../output/fit_train_RF.RData")
tm_test_RF <- system.time(label_pred <- as.integer(test_RF(fit_train_RF, feature_test)));
}
label_pred <- ifelse(label_pred == 1, 0, 1)
#raw accuracy
rftestacc = sum(label_pred==dat_test$label)/length(dat_test$label)
rf_auc <- roc(label_pred, as.integer(dat_test$label))$auc
source("../lib/train_RF.R")
source("../lib/test_RF.R")
source("../lib/cross_validation_RF.R")
run.cv <- TRUE # run cross-validation on the training set
sample.reweight <- FALSE # run sample reweighting in model training
K <- 5  # number of CV folds
run.feature.train <- TRUE # process features for training set
run.test <- TRUE # run evaluation on an independent test set
run.feature.test <- TRUE # process features for test set
model_labels = paste("Ntree =", ntree,'Mtry =', mtry)
p1
02
p2
load("../output/res_cv_RF.RData")
res_cv <- as.data.frame(res_cv)
colnames(res_cv) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
#res_cv$k <- c(ntree,mtry)
for(i in 1:length(hyper_grid_rf_uw$ntree)){
cat("ntree = ", hyper_grid_rf_uw$ntree[i], "\n")
for(j in 1:length(hyper_grid_rf_uw$mtry)){
cat("mtry = ", hyper_grid_rf_uw$mtry[j], "\n")
res_cv[(i-1)*length(hyper_grid_rf_uw$mtry)+j,'ntree'] <- hyper_grid_rf_uw$ntree[i]
res_cv[(i-1)*length(hyper_grid_rf_uw$mtry)+j,'mtry'] <- hyper_grid_rf_uw$mtry[j]
}}
if(run.cv){
p1 <- res_cv %>% mutate(mean_error_true = 1- mean_error , sd_error_true = sd(mean_error_true))%>%
ggplot(aes(x = ntree, y = mean_error_true,
ymin = mean_error_true - sd_error, ymax = mean_error_true + sd_error )) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("mean_error")
p2 <- res_cv %>%
ggplot(aes(x = ntree, y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
print(p2)
}
load("../output/res_cv_RF.RData")
res_cv <- as.data.frame(res_cv)
colnames(res_cv) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
#res_cv$k <- c(ntree,mtry)
for(i in 1:length(hyper_grid_rf_uw$ntree)){
cat("ntree = ", hyper_grid_rf_uw$ntree[i], "\n")
for(j in 1:length(hyper_grid_rf_uw$mtry)){
cat("mtry = ", hyper_grid_rf_uw$mtry[j], "\n")
res_cv[(i-1)*length(hyper_grid_rf_uw$mtry)+j,'ntree'] <- hyper_grid_rf_uw$ntree[i]
res_cv[(i-1)*length(hyper_grid_rf_uw$mtry)+j,'mtry'] <- hyper_grid_rf_uw$mtry[j]
}}
if(run.cv){
p1 <- res_cv %>% mutate(mean_error_true = 1- mean_error , sd_error_true = sd(mean_error_true))%>%
ggplot(aes(x = ntree, y = mean_error_true,
ymin = mean_error_true - sd_error, ymax = mean_error_true + sd_error )) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("mean_error")
p2 <- res_cv %>%
ggplot(aes(x = ntree, y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
print(p2)
}
p1
p2
# hyperparameters for our models
# gbm model (baseline)
hyper_grid_gbm <- expand.grid(
shrinkage = c(0.001, 0.005, 0.010, 0.050, 0.100),
n.trees = c(600, 1200, 1800)
)
# xgboost model
hyper_grid_xgboost <- expand.grid(
eta = c(0.01, 0.05, 0.1, 0.2, 0.3),
lambda = c(0.001, 0.005, 0.010, 0.050, 0.100),
gamma = c(0, 5),
nrounds = c(600, 1200, 1800)
)
# svm model
hyper_grid_svm <- expand.grid(
nprinciple = c(400, 450, 500, 550, 600, 650, 700, 750)
)
# add more hyperparameters for each model as needed
# random forest
# hyper_grid_rf_uw <- expand.grid(
#   ntrees = c(100, 300, 500, 800, 1000),
#   mtry = c(500)
# )
# random forest with weights model
hyper_grid_rforest <- expand.grid(
ntrees = c(1500, 3000, 6000),
maxd = c(0, 5, 10, 15, 20, 25)
)
run.train.RF
